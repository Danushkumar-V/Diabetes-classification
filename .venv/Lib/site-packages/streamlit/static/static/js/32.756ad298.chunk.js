/*! For license information please see 32.756ad298.chunk.js.LICENSE.txt */
(this["webpackJsonpstreamlit-browser"]=this["webpackJsonpstreamlit-browser"]||[]).push([[32],{5146:function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return x}));var a=i(0),n=i(25),s=i(12),r=i(41),o=i.n(r),c=i(163),h=i(148),d=i(2859),g=i.n(d),l=i(2770),u=i(7);const f=i.n(u)()("div",{target:"e10fe9o10"})((({theme:t})=>({"&.vega-embed":{".vega-actions":{zIndex:t.zIndices.popupMenu},summary:{height:"auto",zIndex:t.zIndices.menuButton}}})),"");var p=i(5);const w="(index)",m="source",b=new Set(["datetimeIndex","float_64Index","int_64Index","rangeIndex","timedeltaIndex","uint_64Index"]);class v extends a.PureComponent{constructor(...t){super(...t),this.vegaView=void 0,this.vegaFinalizer=void 0,this.defaultDataName=m,this.element=null,this.state={error:void 0},this.finalizeView=()=>{this.vegaFinalizer&&this.vegaFinalizer(),this.vegaFinalizer=void 0,this.vegaView=void 0},this.generateSpec=()=>{const{element:t,theme:e}=this.props,i=JSON.parse(t.get("spec")),a=JSON.parse(t.get("useContainerWidth"));if(i.config=function(t,e){const{colors:i,fontSizes:a,genericFonts:n}=e,s={labelFont:n.bodyFont,titleFont:n.bodyFont,labelFontSize:a.twoSmPx,titleFontSize:a.twoSmPx},r={background:i.bgColor,axis:{labelColor:i.bodyText,titleColor:i.bodyText,gridColor:i.fadedText10,...s},legend:{labelColor:i.bodyText,titleColor:i.bodyText,...s},title:{color:i.bodyText,subtitleColor:i.bodyText,...s}};if(!t)return r;return o()({},r,t||{})}(i.config,e),this.props.height?(i.width=this.props.width-38,i.height=this.props.height):a&&(i.width=this.props.width-38),i.padding||(i.padding={}),null==i.padding.bottom&&(i.padding.bottom=20),i.datasets)throw new Error("Datasets should not be passed as part of the spec");return i}}async componentDidMount(){try{await this.createView()}catch(t){this.setState({error:t})}}componentWillUnmount(){this.finalizeView()}async componentDidUpdate(t){const{element:e,theme:i}=t,{element:a,theme:n}=this.props,r=e.get("spec"),o=a.get("spec");if(!this.vegaView||r!==o||i!==n||t.width!==this.props.width||t.height!==this.props.height){Object(s.c)("Vega spec changed.");try{await this.createView()}catch(l){this.setState({error:l})}return}const c=e.get("data"),h=a.get("data");(c||h)&&this.updateData(this.defaultDataName,c,h);const d=y(e)||{},g=y(a)||{};for(const[s,u]of Object.entries(g)){const t=s||this.defaultDataName,e=d[t];this.updateData(t,e,u)}for(const s of Object.keys(d))g.hasOwnProperty(s)||s===this.defaultDataName||this.updateData(s,null,null);this.vegaView.resize().runAsync()}updateData(t,e,i){if(!this.vegaView)throw new Error("Chart has not been drawn yet");if(!i||!i.get("data")){return void(this.vegaView._runtime.data.hasOwnProperty(t)&&this.vegaView.remove(t,l.truthy))}if(!e||!e.get("data"))return void this.vegaView.insert(t,O(i));const[a,n]=Object(h.g)(e.get("data")),[r,o]=Object(h.g)(i.get("data"));if(function(t,e,i,a,n,s){if(i!==s)return!1;if(e>n)return!1;if(0===e)return!1;const r=t.get("data"),o=a.get("data"),c=s-1,d=e-1;if(Object(h.f)(r,c,0)!==Object(h.f)(o,c,0)||Object(h.f)(r,c,d)!==Object(h.f)(o,c,d))return!1;return!0}(e,a,n,i,r,o))a<r&&this.vegaView.insert(t,O(i,a));else{const e=l.changeset().remove(l.truthy).insert(O(i));this.vegaView.change(t,e),Object(s.c)("Had to clear the ".concat(t," dataset before inserting data through Vega view."))}}async createView(){if(Object(s.c)("Creating a new Vega view."),!this.element)throw Error("Element missing.");this.finalizeView();const t=this.props.element,e=this.generateSpec(),{vgSpec:i,view:a,finalize:n}=await g()(this.element,e);this.vegaView=a,this.vegaFinalizer=n;const r=function(t){const e=y(t);if(null==e)return null;const i={};for(const[a,n]of Object.entries(e))i[a]=O(n);return i}(t),o=r?Object.keys(r):[];if(1===o.length){const[t]=o;this.defaultDataName=t}else 0===o.length&&i.data&&(this.defaultDataName=m);const c=function(t){const e=t.get("data");if(!e)return null;return O(e)}(t);if(c&&a.insert(this.defaultDataName,c),r)for(const[s,h]of Object.entries(r))a.insert(s,h);await a.runAsync(),this.vegaView.resize().runAsync()}render(){if(this.state.error)throw this.state.error;return Object(p.jsx)(f,{"data-testid":"stVegaLiteChart",ref:t=>{this.element=t}})}}function y(t){if(!t.get("datasets")||t.get("datasets").isEmpty())return null;const e={};return t.get("datasets").forEach(((t,i)=>{if(!t)return;const a=t.get("hasName")?t.get("name"):null;e[a]=t.get("data")})),e}function O(t,e=0){if(!t.get("data"))return[];if(!t.get("index"))return[];if(!t.get("columns"))return[];const i=[],[a,n]=Object(h.g)(t.get("data")),s=t.get("index").get("type"),r=b.has(s);for(let o=e;o<a;o++){const e={};r&&(e[w]=Object(h.e)(t.get("index"),0,o));for(let i=0;i<n;i++)e[Object(h.e)(t.get("columns"),0,i)]=Object(h.f)(t.get("data"),i,o);i.push(e)}return i}var x=Object(n.withTheme)(Object(c.a)(v))}}]);